function defaultHack (server) {
  hack (server);
  return true;
}
function boolToNumber (check) {
  if (check === true) {
    return 1;
  } else {
    return 0;
  }
}

function terminate () {
  if (isRunning ('terminate.script', 'home')) {
    exit ();
  }
}

Brute = boolToNumber (fileExists ('brutessh.exe', 'home')); //Not able to add in True and false
Crack = boolToNumber (fileExists ('ftpcrack.exe', 'home'));
Relay = boolToNumber (fileExists ('relaysmtp.exe', 'home'));
Http = boolToNumber (fileExists ('httpworm.exe', 'home'));
Sql = boolToNumber (fileExists ('sqlinject.exe', 'home'));
BreackThrough = Brute + Crack + Relay + Http + Sql;

servers = scan ();
print (servers);
parent = getHostname ();
write (parent, (data = parent), (mode = 'a'));

for (i = 0; i < servers.length; ++i) {
  if (servers[i] != 'home') {
    terminate ();
    if (servers[i] != 'home') {
      if (hasRootAccess (servers[i])) {
        res = getServerRam (servers[i]);
        print (res[0]);
        scp ('hack-joe.script', 'home', servers[i]);
        if (scriptRunning ('hack-joe.script', servers[i])) {
        } else {
          scp ('virus.script', 'home', servers[i]);
          exec ('virus.script', servers[i]);
        }
        if (res[0] == 32);
        {
          exec ('hack-joe.script', servers[i], 12);
        }
        if (res[0] == 16);
        {
          exec ('hack-joe.script', servers[i], 6);
        }
        if (res[0] == 8);
        {
          exec ('hack-joe.script', servers[i], 3);
        }
      } else if (getServerNumPortsRequired (servers[i]) <= BreackThrough) {
        if (Sql) {
          sqlinject (servers[i]);
        }
        if (Http) {
          httpworm (servers[i]);
        }
        if (Crack) {
          ftpcrack (servers[i]);
        }
        if (Relay) {
          relaysmtp (servers[i]);
        }
        if (Brute) {
          brutessh (servers[i]);
        }
        nuke (servers[i]);
      } else {
        print ('Too many ports needed');
        print ('I need ');
        print (getServerNumPortsRequired (servers[i]));
        print ('For');
        print (servers[i]);
      }
    }
  }
}
